{"ast":null,"code":"var __jsx = React.createElement;\n// TOASTER https://jossmac.github.io/react-toast-notifications/\nimport React, { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { useToasts } from \"react-toast-notifications\";\nimport { GET_SINGLE_PRODUCT, UPDATE_CHECKOUT, CREATE_CHECKOUT } from \"../../src/graphql/schema.graphql\";\nimport { titlelize } from \"../../helpers\";\nimport { Container, padding } from \"../../styles\";\nimport ProductGallery from \"../../components/ProductGallery/ProductGallery\";\nimport { MainContent, Aside, Wrap } from \"../../styles/product/product\";\nimport ProductOptions from \"../../components/ProductGallery/components/ProductOptions\";\nimport { formatCurrency } from \"../../helpers/formatting\";\nimport { useCart } from \"../../src/context/cart\";\nimport ProductQuantitySelect from \"../../components/ProductQuantitySelect/ProductQuantitySelect\";\nimport HtmlHead from \"../../components/HtmlHead/HtmlHead\";\nvar ToasterContent;\n\n(function (ToasterContent) {\n  ToasterContent[\"Error\"] = \"Er is iets fout gegaan. Probeer opnieuw\";\n  ToasterContent[\"Success\"] = \"Product is succesvol toegevoegd\";\n})(ToasterContent || (ToasterContent = {}));\n\nconst SingleProduct = () => {\n  const router = useRouter();\n  const {\n    pid\n  } = router.query;\n  const {\n    0: variant,\n    1: setVariant\n  } = useState(null);\n  const {\n    0: quantity,\n    1: setQuantity\n  } = useState(1);\n  const {\n    0: checkoutId,\n    1: setCheckoutId\n  } = useState();\n  const {\n    setCartResponse\n  } = useCart();\n  const {\n    addToast\n  } = useToasts();\n  const {\n    data,\n    loading\n  } = useQuery(GET_SINGLE_PRODUCT, {\n    variables: {\n      handle: pid\n    }\n  });\n  const [createCheckout] = useMutation(CREATE_CHECKOUT);\n  const [updateCart] = useMutation(UPDATE_CHECKOUT);\n  const productTitle = titlelize(pid, true);\n  useEffect(() => {\n    if (!data) return;\n    setVariant(data.productByHandle.variants.edges[0].node);\n    setCheckoutId(localStorage.getItem(\"checkoutId\"));\n  }, [loading, data]);\n\n  if (loading || !variant) {\n    return null;\n  }\n\n  const {\n    productByHandle: product\n  } = data;\n  const hasMultipleImages = product.images.edges.length > 1;\n  const hasNoImage = !Boolean(product.images.edges.length);\n  const hasProductOptions = product.options.length > 1;\n  const disableProduct = variant.currentlyNotInStock || variant.quantityAvailable === 0;\n\n  const handleVariantChange = id => {\n    const {\n      node: variant\n    } = product.variants.edges.find(({\n      node\n    }) => node.id === id);\n    setVariant(variant);\n  };\n\n  const handleDirectBuy = () => {\n    createCheckout({\n      variables: {\n        input: {\n          lineItems: [{\n            quantity,\n            variantId: variant.id\n          }]\n        }\n      }\n    }).then(res => res).then(({\n      data\n    }) => {\n      if (!checkoutId) {\n        const id = data.checkoutCreate.checkout.id;\n        setCheckoutId(id);\n        localStorage.setItem(\"checkoutId\", id);\n      }\n\n      window.open(data.checkoutCreate.checkout.webUrl, \"_blank\");\n    });\n  };\n\n  const handleUpdateCart = async () => {\n    if (!checkoutId) {\n      await createCheckout({\n        variables: {\n          input: {\n            lineItems: [{\n              quantity,\n              variantId: variant.id\n            }]\n          }\n        }\n      }).then(res => res).then(({\n        data\n      }) => {\n        const id = data.checkoutCreate.checkout.id;\n        localStorage.setItem(\"checkoutId\", id);\n        setCheckoutId(id);\n        setCartResponse(data.checkoutCreate.checkout);\n      });\n      return;\n    }\n\n    await updateCart({\n      variables: {\n        checkoutId: checkoutId,\n        lineItems: [{\n          quantity,\n          variantId: variant.id\n        }]\n      }\n    }).then(res => res).then(({\n      data\n    }) => {\n      setCartResponse(data.checkoutLineItemsAdd.checkout);\n      addToast(ToasterContent.Success, {\n        appearance: \"success\",\n        autoDismiss: true\n      });\n    }).catch(err => addToast(ToasterContent.Error, {\n      appearance: \"error\",\n      autoDismiss: true\n    }));\n  };\n\n  return __jsx(React.Fragment, null, __jsx(HtmlHead, {\n    customKey: \"main\",\n    title: `2-Span | ${productTitle}`,\n    description: product.description\n  }), __jsx(Container, null, __jsx(\"div\", {\n    style: {\n      padding: `0 0 ${padding.xl}`\n    }\n  })), __jsx(Wrap, null, __jsx(Container, null, __jsx(\"div\", {\n    className: \"content-wrap\"\n  }, __jsx(MainContent, null, __jsx(ProductGallery, {\n    hasMultipleImages: hasMultipleImages,\n    hasNoImage: hasNoImage,\n    images: product.images.edges\n  })), __jsx(Aside, null, disableProduct && __jsx(\"span\", {\n    className: \"note warning margin-bottom-1\"\n  }, \"Tijdelijk niet beschikbaar\"), __jsx(\"h1\", null, productTitle), __jsx(\"h2\", {\n    className: \"product-price\"\n  }, formatCurrency(variant.priceV2.amount)), __jsx(\"p\", {\n    className: \"product-description\"\n  }, product.description), __jsx(\"div\", {\n    className: \"select-content\"\n  }, hasProductOptions && __jsx(ProductOptions, {\n    variants: product.variants,\n    onVariantChange: handleVariantChange\n  }), __jsx(ProductQuantitySelect, {\n    onChange: setQuantity,\n    maxAmount: variant.quantityAvailable\n  })), __jsx(\"div\", {\n    className: \"button-content\"\n  }, __jsx(\"button\", {\n    type: \"button\",\n    className: \"btn-primary\",\n    onClick: handleUpdateCart,\n    disabled: disableProduct\n  }, \"Toevoegen aan winkelwagen\"), __jsx(\"button\", {\n    style: {\n      marginLeft: \"1em\"\n    },\n    type: \"button\",\n    className: \"btn-ghost\",\n    onClick: handleDirectBuy,\n    disabled: disableProduct\n  }, \"of koop direct\")))))));\n};\n\nexport async function getStaticPaths() {\n  return {\n    paths: [\"/product/[pid]\"],\n    fallback: true\n  };\n}\nexport async function getStaticProps(props) {\n  return {\n    props: {\n      pid: props.params.pid\n    }\n  };\n}\nexport default SingleProduct;","map":null,"metadata":{},"sourceType":"module"}