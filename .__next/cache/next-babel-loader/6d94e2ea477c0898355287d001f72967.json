{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_SINGLE_COLLECTION } from \"../../src/graphql/schema.graphql\";\nimport { Container, padding } from \"../../styles\";\nimport { Row, Col } from \"../index.styles\";\nimport { titlelize } from \"../../helpers\";\nimport { ProductCard } from \"../../components\";\nimport { ProductTypes } from \"../../components/ProductCard/types\";\nimport HtmlHead from \"../../components/HtmlHead/HtmlHead\";\n\nvar SingleCategory = function SingleCategory() {\n  var router = useRouter();\n  var cid = router.query.cid;\n\n  var _useQuery = useQuery(GET_SINGLE_COLLECTION, {\n    variables: {\n      handle: cid\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading;\n\n  var categoryTitle = titlelize(cid, false);\n  var prettyTitle = titlelize(cid, true); //TODO MAKE THIS A COMPONENT\n\n  if (loading) {\n    return __jsx(React.Fragment, null, __jsx(HtmlHead, {\n      title: \"2-Span | \".concat(prettyTitle)\n    }), __jsx(Container, null, __jsx(\"div\", {\n      style: {\n        padding: \"\".concat(padding.xxl, \" 0 \").concat(padding.xl)\n      }\n    }, __jsx(\"h1\", {\n      className: \"section-title\"\n    }, __jsx(\"span\", null, \"Alle \", categoryTitle)))));\n  }\n\n  var edges = data.collectionByHandle.products.edges;\n  return __jsx(React.Fragment, null, __jsx(HtmlHead, {\n    title: \"2-Span | \".concat(prettyTitle),\n    url: window.location.href\n  }), __jsx(Container, null, __jsx(\"div\", {\n    style: {\n      padding: \"\".concat(padding.xl, \" 0 \").concat(padding.xl)\n    }\n  }, __jsx(\"h1\", {\n    className: \"section-title\"\n  }, __jsx(\"span\", null, \"Alle \", categoryTitle))), __jsx(Row, null, edges.map(function (_ref) {\n    var _node$images$edges$;\n\n    var node = _ref.node;\n    var nodeImage = (_node$images$edges$ = node.images.edges[0]) === null || _node$images$edges$ === void 0 ? void 0 : _node$images$edges$.node.originalSrc;\n    var hasMaxVariantPrice = node.priceRange.maxVariantPrice.amount !== node.priceRange.minVariantPrice.amount;\n    return __jsx(Col, {\n      key: node.id\n    }, __jsx(ProductCard, {\n      type: ProductTypes.Product,\n      title: titlelize(node.title, false, true),\n      handle: node.handle,\n      imageUrl: nodeImage,\n      minPrice: node.priceRange.minVariantPrice.amount,\n      maxPrice: hasMaxVariantPrice && node.priceRange.maxVariantPrice.amount\n    }));\n  }))));\n};\n\nexport var __N_SSG = true;\nexport default SingleCategory;","map":null,"metadata":{},"sourceType":"module"}